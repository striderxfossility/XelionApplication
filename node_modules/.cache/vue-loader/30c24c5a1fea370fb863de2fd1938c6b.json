{"remainingRequest":"C:\\Users\\jelle\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\jelle\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\jelle\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\jelle\\Desktop\\Xelion Plugin\\src\\Home.vue?vue&type=template&id=2380d2d8&scoped=true&","dependencies":[{"path":"C:\\Users\\jelle\\Desktop\\Xelion Plugin\\src\\Home.vue","mtime":1579080331999},{"path":"C:\\Users\\jelle\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\jelle\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\jelle\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\jelle\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCBbCiAgICBfdm0uX20oMCksCiAgICBfYygiZGl2IiwgeyBhdHRyczogeyBpZDogIm1vZGFsLXVzZXIiLCAidWstbW9kYWwiOiAiIiB9IH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ1ay1tb2RhbC1kaWFsb2cgdWstbW9kYWwtYm9keSIgfSwgWwogICAgICAgIF9jKCJoMiIsIHsgc3RhdGljQ2xhc3M6ICJ1ay1tb2RhbC10aXRsZSIgfSwgW192bS5fdigiU3RhdHVzIildKSwKICAgICAgICBfdm0udXNlcgogICAgICAgICAgPyBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInVrLW1hcmdpbiIgfSwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInNlbGVjdCIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS51c2VyLnByZXNlbmNlSW5mby5zdGF0dXMsCiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAidXNlci5wcmVzZW5jZUluZm8uc3RhdHVzIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ1ay1zZWxlY3QiLAogICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgJCRzZWxlY3RlZFZhbCA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgLmNhbGwoJGV2ZW50LnRhcmdldC5vcHRpb25zLCBmdW5jdGlvbihvKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG8uc2VsZWN0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbihvKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbCA9ICJfdmFsdWUiIGluIG8gPyBvLl92YWx1ZSA6IG8udmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsCiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICBfdm0uJHNldCgKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnVzZXIucHJlc2VuY2VJbmZvLAogICAgICAgICAgICAgICAgICAgICAgICAic3RhdHVzIiwKICAgICAgICAgICAgICAgICAgICAgICAgJGV2ZW50LnRhcmdldC5tdWx0aXBsZQogICAgICAgICAgICAgICAgICAgICAgICAgID8gJCRzZWxlY3RlZFZhbAogICAgICAgICAgICAgICAgICAgICAgICAgIDogJCRzZWxlY3RlZFZhbFswXQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoIm9wdGlvbiIsIHsgYXR0cnM6IHsgdmFsdWU6ICJvbmxpbmUiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigiSW5sb2dzdGF0dXMiKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoIm9wdGlvbiIsIHsgYXR0cnM6IHsgdmFsdWU6ICJhdmFpbGFibGUiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigiQmVzY2hpa2JhYXIiKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoIm9wdGlvbiIsIHsgYXR0cnM6IHsgdmFsdWU6ICJ1bmF2YWlsYWJsZSIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJOaWV0IGJlc2NoaWtiYWFyIikKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJvcHRpb24iLCB7IGF0dHJzOiB7IHZhbHVlOiAiZG9udF9kaXN0dXJiIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIk5pZXQgc3RvcmVuIikKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJvcHRpb24iLCB7IGF0dHJzOiB7IHZhbHVlOiAiYXRfYXBwb2ludG1lbnQiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigiQWZzcHJhYWsiKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoIm9wdGlvbiIsIHsgYXR0cnM6IHsgdmFsdWU6ICJzaG9ydF9vdXRfb2Zfb2ZmaWNlIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIktvcnQgYWZ3ZXppZyIpCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygib3B0aW9uIiwgeyBhdHRyczogeyB2YWx1ZTogImxvbmdfb3V0X29mX29mZmljZSIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJMYW5nIGFmd2V6aWciKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIDogX3ZtLl9lKCksCiAgICAgICAgX3ZtLnVzZXIKICAgICAgICAgID8gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ1ay1tYXJnaW4iIH0sIFsKICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnVzZXIucHJlc2VuY2VJbmZvLm1lc3NhZ2UsCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInVzZXIucHJlc2VuY2VJbmZvLm1lc3NhZ2UiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInVrLWlucHV0IiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJ0ZXh0IiwgcGxhY2Vob2xkZXI6ICJTdGF0dXMiIH0sCiAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLnVzZXIucHJlc2VuY2VJbmZvLm1lc3NhZ2UgfSwKICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBfdm0uJHNldCgKICAgICAgICAgICAgICAgICAgICAgIF92bS51c2VyLnByZXNlbmNlSW5mbywKICAgICAgICAgICAgICAgICAgICAgICJtZXNzYWdlIiwKICAgICAgICAgICAgICAgICAgICAgICRldmVudC50YXJnZXQudmFsdWUKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdKQogICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ1ay10ZXh0LXJpZ2h0IiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInVrLWJ1dHRvbiB1ay1idXR0b24tZGVmYXVsdCB1ay1tb2RhbC1jbG9zZSIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogImJ1dHRvbiIgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJDYW5jZWwiKV0KICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInVrLWJ1dHRvbiB1ay1idXR0b24tcHJpbWFyeSB1ay1tb2RhbC1jbG9zZSIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogImJ1dHRvbiIgfSwKICAgICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLnVwZGF0ZVN0YXR1cyB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIlVwZGF0ZSIpXQogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKSwKICAgIF9jKAogICAgICAiZGl2IiwKICAgICAgewogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICBpZDogIm9mZmNhbnZhcy1wdXNoIiwKICAgICAgICAgICJ1ay1vZmZjYW52YXMiOiAibW9kZTogcHVzaDsgb3ZlcmxheTogdHJ1ZSIKICAgICAgICB9CiAgICAgIH0sCiAgICAgIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInVrLW9mZmNhbnZhcy1iYXIiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidWstY2FyZC1oZWFkZXIiLAogICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IGN1cnNvcjogInBvaW50ZXIiIH0sCiAgICAgICAgICAgICAgYXR0cnM6IHsgInVrLXRvZ2dsZSI6ICJ0YXJnZXQ6ICNtb2RhbC11c2VyIiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfdm0udXNlcgogICAgICAgICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInVrLWdyaWQtc21hbGwgdWstZmxleC1taWRkbGUiLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgInVrLWdyaWQiOiAiIiB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInVrLXdpZHRoLWF1dG8iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnVzZXIucHJlc2VuY2VJbmZvLnN0YXR1cyA9PSAiYXZhaWxhYmxlIgogICAgICAgICAgICAgICAgICAgICAgICAgID8gX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJyb3VuZGVkSWNvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJiYWNrZ3JvdW5kLWNvbG9yIjogImdyZWVuIiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyAidWstdG9vbHRpcCI6ICJCZXNjaGlrYmFhciIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgICAgICAgICBfdm0udXNlci5wcmVzZW5jZUluZm8uc3RhdHVzID09ICJ1bmF2YWlsYWJsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICA/IF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicm91bmRlZEljb24iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyAiYmFja2dyb3VuZC1jb2xvciI6ICJyZWQiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7ICJ1ay10b29sdGlwIjogIk5pZXQgYmVzY2hpa2JhYXIiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnVzZXIucHJlc2VuY2VJbmZvLnN0YXR1cyA9PSAib25saW5lIgogICAgICAgICAgICAgICAgICAgICAgICAgID8gX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJyb3VuZGVkSWNvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJiYWNrZ3JvdW5kLWNvbG9yIjogImdyZWVuIiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyAidWstdG9vbHRpcCI6ICJPbmxpbmUiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnVzZXIucHJlc2VuY2VJbmZvLnN0YXR1cyA9PSAiZG9udF9kaXN0dXJiIgogICAgICAgICAgICAgICAgICAgICAgICAgID8gX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJyb3VuZGVkSWNvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJiYWNrZ3JvdW5kLWNvbG9yIjogImRhcmtyZWQiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7ICJ1ay10b29sdGlwIjogIk5pZXQgc3RvcmVuIiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLl9lKCksCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS51c2VyLnByZXNlbmNlSW5mby5zdGF0dXMgPT0gImF0X2FwcG9pbnRtZW50IgogICAgICAgICAgICAgICAgICAgICAgICAgID8gX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJyb3VuZGVkSWNvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJiYWNrZ3JvdW5kLWNvbG9yIjogIndoaXRlIiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyAidWstdG9vbHRpcCI6ICJBZnNwcmFhayIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgICAgICAgICBfdm0udXNlci5wcmVzZW5jZUluZm8uc3RhdHVzID09ICJzaG9ydF9vdXRfb2Zfb2ZmaWNlIgogICAgICAgICAgICAgICAgICAgICAgICAgID8gX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJyb3VuZGVkSWNvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJiYWNrZ3JvdW5kLWNvbG9yIjogInllbGxvdyIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgInVrLXRvb2x0aXAiOiAiS29ydCBhZndlemlnIiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLl9lKCksCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS51c2VyLnByZXNlbmNlSW5mby5zdGF0dXMgPT0gImxvbmdfb3V0X29mX29mZmljZSIKICAgICAgICAgICAgICAgICAgICAgICAgICA/IF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicm91bmRlZEljb24iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyAiYmFja2dyb3VuZC1jb2xvciI6ICJvcmFuZ2UiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7ICJ1ay10b29sdGlwIjogIkxhbmcgYWZ3ZXppZyIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICA6IF92bS5fZSgpCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidWstd2lkdGgtZXhwYW5kIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJoMyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ1ay1jYXJkLXRpdGxlIHVrLW1hcmdpbi1yZW1vdmUtYm90dG9tIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdihfdm0uX3MoX3ZtLnVzZXIucGVyc29uLmNvbW1vbk5hbWUpKV0KICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgInAiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ1ay10ZXh0LW1ldGEgdWstbWFyZ2luLXJlbW92ZS10b3AiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0aW1lIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBkYXRldGltZTogIjIwMTYtMDQtMDFUMTk6MDAiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdihfdm0uX3MoX3ZtLnVzZXIucHJlc2VuY2VJbmZvLm1lc3NhZ2UpKV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICA6IF92bS5fZSgpCiAgICAgICAgICAgIF0KICAgICAgICAgICksCiAgICAgICAgICBfYygiaDMiLCBbX3ZtLl92KCJUaXRsZSIpXSksCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gVXQgZW5pbSBhZCBtaW5pbSB2ZW5pYW0sIHF1aXMgbm9zdHJ1ZCBleGVyY2l0YXRpb24gdWxsYW1jbyBsYWJvcmlzIG5pc2kgdXQgYWxpcXVpcCBleCBlYSBjb21tb2RvIGNvbnNlcXVhdC4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXQogICAgKSwKICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidWstZ3JpZCIgfSwgWwogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7IHN0YXRpY0NsYXNzOiAidWstd2lkdGgtMS0zIiwgc3RhdGljU3R5bGU6IHsgYmFja2dyb3VuZDogIiNmYWZhZmEiIH0gfSwKICAgICAgICBfdm0uX2woX3ZtLmhpc3RvcnksIGZ1bmN0aW9uKGhpc3RvciwgaSkgewogICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGtleTogImhpc3Rvci0iICsgaSwKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInVrLWNhcmQtaGVhZGVyIiwKICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyAiYm9yZGVyLWJvdHRvbSI6ICIxcHggc29saWQgIzk5OTk5OSIgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ1ay1ncmlkLXNtYWxsIHVrLWZsZXgtbWlkZGxlIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgInVrLWdyaWQiOiAiIiB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInVrLXdpZHRoLWF1dG8iIH0sIFsKICAgICAgICAgICAgICAgICAgICBoaXN0b3IuYXR0YWNobWVudAogICAgICAgICAgICAgICAgICAgICAgPyBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidWstYm9yZGVyLWNpcmNsZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAiNDAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAiNDAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGF0YTppbWFnZS9qcGVnO2Jhc2U2NCwiICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlzdG9yLmF0dGFjaG1lbnQuY29udGVudHNCNjRTdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgICAgICFoaXN0b3IuYXR0YWNobWVudAogICAgICAgICAgICAgICAgICAgICAgPyBfYygiaW1nIiwgeyBhdHRyczogeyB3aWR0aDogIjQwIiwgaGVpZ2h0OiAiNDAiIH0gfSkKICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLl9lKCkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidWstd2lkdGgtZXhwYW5kIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiaDMiLAogICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInVrLWNhcmQtdGl0bGUgdWstbWFyZ2luLXJlbW92ZS1ib3R0b20iIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIGhpc3Rvci5vYmplY3QubGFzdENvbW11bmljYXRpb24uc3RhdHVzID09ICJBbnN3ZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBfYygic3BhbiIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImkiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmYXMgZmEtcGhvbmUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IGNvbG9yOiAiZ3JlZW4iIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgICAgICAgICAgICAgICAgaGlzdG9yLm9iamVjdC5sYXN0Q29tbXVuaWNhdGlvbi5zdGF0dXMgPT0gIlVuYXZhaWxhYmxlIgogICAgICAgICAgICAgICAgICAgICAgICAgID8gX2MoInNwYW4iLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmFzIGZhLXBob25lLXNsYXNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyBjb2xvcjogInJlZCIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgIiAiICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcyhoaXN0b3Iub2JqZWN0LmFkZHJlc3NhYmxlLmNvbW1vbk5hbWUpICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgIgogICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICBoaXN0b3Iub2JqZWN0Lmxhc3RDb21tdW5pY2F0aW9uLnZvaWNlbWFpbCA9PSB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBfYygic3BhbiIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImkiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmYXMgZmEtdm9pY2VtYWlsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyBjb2xvcjogIiM4MzgzZmYiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidWstdGV4dC1tZXRhIHVrLW1hcmdpbi1yZW1vdmUtdG9wIiB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAidGltZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBkYXRldGltZTogIjIwMTYtMDQtMDFUMTk6MDAiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLk5pY2VEYXRlKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaXN0b3Iub2JqZWN0Lmxhc3RDb21tdW5pY2F0aW9uLmRhdGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY1N0eWxlOiB7ICJmb250LXdlaWdodCI6ICJib2xkIiB9IH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiRHV1ciAiICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5OaWNlU2Vjb25kcygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpc3Rvci5vYmplY3QubGFzdENvbW11bmljYXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmR1cmF0aW9uU2VjCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXQogICAgICAgICAgKQogICAgICAgIH0pLAogICAgICAgIDAKICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgeyBzdGF0aWNDbGFzczogInVrLXdpZHRoLTEtMyIgfSwKICAgICAgICBfdm0uX2woX3ZtLmNoYW5uZWxzLCBmdW5jdGlvbihjaGFubmVsKSB7CiAgICAgICAgICByZXR1cm4gX2MoImRpdiIsIHsga2V5OiBjaGFubmVsLm9iamVjdC5jaGFubmVsSWQgfSwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiAiICsgX3ZtLl9zKGNoYW5uZWwub2JqZWN0LnBob25lTnVtYmVyKSArICIgaXMgYWFuIGhldCBiZWxsZW4hICIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICB9KSwKICAgICAgICAwCiAgICAgICkKICAgIF0pCiAgXSkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gWwogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJuYXYiLAogICAgICB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJ1ay1uYXZiYXIgdWstbmF2YmFyLWNvbnRhaW5lciB1ay1tYXJnaW4iLAogICAgICAgIHN0YXRpY1N0eWxlOiB7ICJtYXJnaW4tYm90dG9tIjogIjBweCIgfQogICAgICB9LAogICAgICBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ1ay1uYXZiYXItbGVmdCIgfSwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidWstbmF2YmFyLXRvZ2dsZSIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgInVrLXRvZ2dsZSI6ICJ0YXJnZXQ6ICNvZmZjYW52YXMtcHVzaCIsIGhyZWY6ICIjIiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygic3BhbiIsIHsgYXR0cnM6IHsgInVrLW5hdmJhci10b2dnbGUtaWNvbiI6ICIiIH0gfSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidWstbWFyZ2luLXNtYWxsLWxlZnQiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiTWVudSIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXQogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0KICAgICkKICB9Cl0KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}